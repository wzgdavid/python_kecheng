# encoding: utf-8
import re


def to_list(tree):
    '''
    1.请写一个把树转为列表的函数
例：(1 (2 3 (4 5 (69)) 8)))=> (1 2 3 4 5 69 8)
    '''
    lst = re.split('\W+', str(tree))
    rtn = [int(a) for a in lst if len(a)>0]
    return rtn

def foo():
    '''
    2.请写一个把一个集合转为包含其所有子集的集合的函数
例： (1 2 3)=>((1 2 3) (1 2) (1 3) (1) (2 3) (2) (3) ())
    '''
    pass




if __name__ == '__main__':
    aaa = [1,2,3,[4,5,[55,66]],2,3]
    print to_list(aaa)
    bbb = [1,2,3,4]

'''
3.请写一个把一个集合转为包含其所有排列的集合的函数
例： (1 2 3)=> ((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))



4.请写一个把一个有序列表转换为一棵二叉平衡树的函数
例：(1 2 3 4 5 7 8)=> (4 (2 (1 () ()) (3 () ())) (7 (5 () ()) (8 () ())))




5.请写一个可算出4张牌＝24的所有解法的函数
'''